generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id         Int        @id @default(autoincrement())
  cpf             String
  telephone       String
  password        String     @db.VarChar(200)
  address_id      Int
  isblocked       Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt()
  user_cpf        Cpf        @relation(fields: [cpf], references: [cpf])
  user_telephone  Telephone  @relation(fields: [telephone], references: [telephone])
  user_address_id Address    @relation(fields: [address_id], references: [address_id])
  user_donation   Donation[]
  user_donor      Donor[]
  user_helper     Helper[]
  user_driver     Driver[]
  user_vehicle    Vehicle[]

  @@map("Users")
}

model Helper {
  helper_id         Int       @unique @default(autoincrement())
  cpf               String
  telephone         String
  address_id        Int
  user_id           Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt()
  helper_cpf        Cpf       @relation(fields: [cpf], references: [cpf])
  helper_telephone  Telephone @relation(fields: [telephone], references: [telephone])
  helper_address_id Address   @relation(fields: [address_id], references: [address_id])
  helper_user_id    User      @relation(fields: [user_id], references: [user_id])

  @@map("Helpers")
}

model Vehicle {
  vehicle_id      Int      @unique @default(autoincrement())
  model           String
  chassi          String   @unique
  plate           String   @unique
  km              String
  user_id         Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt()
  vehicle_user_id User     @relation(fields: [user_id], references: [user_id])

  @@map("Vehicles")
}

model Driver {
  cnh               String    @id @db.VarChar(11)
  cpf               String
  telephone         String
  address_id        Int
  user_id           Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt()
  driver_cpf        Cpf       @relation(fields: [cpf], references: [cpf])
  driver_telephone  Telephone @relation(fields: [telephone], references: [telephone])
  driver_address_id Address   @relation(fields: [address_id], references: [address_id])
  driver_user_id    User      @relation(fields: [user_id], references: [user_id])

  @@map("Drivers")
}

model Cpf {
  cpf         String   @id @db.VarChar(11)
  name        String   @db.VarChar(100)
  dateofbirth String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  cpf_user    User[]
  cpf_helper  Helper[]
  cpf_driver  Driver[]

  @@map("Cpfs")
}

model Telephone {
  telephone        String   @id @db.VarChar(11)
  contact1         String?
  contact2         String?
  email            String?
  telephone_user   User[]
  telephone_donor  Donor[]
  telephone_helper Helper[]
  telephone_driver Driver[]

  @@map("Telephones")
}

model Zipcode {
  zipcode         String    @id @db.VarChar(11)
  street          String    @db.VarChar(100)
  district        String    @db.VarChar(100)
  city            String    @db.VarChar(100)
  zipcode_address Address[]

  @@map("Zipcodes")
}

model Address {
  address_id          Int        @id @default(autoincrement())
  zipcode             String
  numresidence        String     @db.VarChar(50)
  referencepoint      String
  typeresidence       String
  building            String?    @db.VarChar(100)
  block               String?    @db.VarChar(50)
  livingapartmentroom String?    @db.VarChar(50)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt()
  address_zipcode     Zipcode    @relation(fields: [zipcode], references: [zipcode])
  address_user        User[]
  address_donation    Donation[]
  address_donor       Donor[]
  address_helper      Helper[]
  address_driver      Driver[]

  @@map("Addresss")
}

model Donor {
  donor_id         Int         @unique @default(autoincrement())
  name             String
  telephone        String
  address_id       Int
  user_id          Int
  cnpj             String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt()
  donor_telephone  Telephone   @relation(fields: [telephone], references: [telephone])
  donor_address_id Address     @relation(fields: [address_id], references: [address_id])
  donor_user_id    User        @relation(fields: [user_id], references: [user_id])
  donor_cpnj       Enterprise? @relation(fields: [cnpj], references: [cnpj])
  donor_donation   Donation[]

  @@map("Donors")
}

model Donation {
  donation_id         Int      @unique @default(autoincrement())
  address_id          Int
  donor_id            Int
  user_id             Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt()
  donation_address_id Address  @relation(fields: [address_id], references: [address_id])
  donation_donor_id   Donor    @relation(fields: [donor_id], references: [donor_id])
  donarion_user_id    User     @relation(fields: [user_id], references: [user_id])

  @@map("Donations")
}

model Enterprise {
  cnpj             String   @id @db.VarChar(20)
  corporatename    String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt()
  enterprise_donor Donor[]

  @@map("Enterprises")
}

model Object {
  object_id Int    @unique @default(autoincrement())
  object    String
  amount    String

  @@map("Objects")
}